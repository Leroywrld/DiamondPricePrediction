[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Pipeline",
        "importPath": "sklearn.pipeline",
        "description": "sklearn.pipeline",
        "isExtraImport": true,
        "detail": "sklearn.pipeline",
        "documentation": {}
    },
    {
        "label": "Pipeline",
        "importPath": "sklearn.pipeline",
        "description": "sklearn.pipeline",
        "isExtraImport": true,
        "detail": "sklearn.pipeline",
        "documentation": {}
    },
    {
        "label": "ColumnTransformer",
        "importPath": "sklearn.compose",
        "description": "sklearn.compose",
        "isExtraImport": true,
        "detail": "sklearn.compose",
        "documentation": {}
    },
    {
        "label": "ColumnTransformer",
        "importPath": "sklearn.compose",
        "description": "sklearn.compose",
        "isExtraImport": true,
        "detail": "sklearn.compose",
        "documentation": {}
    },
    {
        "label": "OrdinalEncoder",
        "importPath": "category_encoders",
        "description": "category_encoders",
        "isExtraImport": true,
        "detail": "category_encoders",
        "documentation": {}
    },
    {
        "label": "OrdinalEncoder",
        "importPath": "category_encoders",
        "description": "category_encoders",
        "isExtraImport": true,
        "detail": "category_encoders",
        "documentation": {}
    },
    {
        "label": "RobustScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "RobustScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "ensemble",
        "importPath": "sklearn",
        "description": "sklearn",
        "isExtraImport": true,
        "detail": "sklearn",
        "documentation": {}
    },
    {
        "label": "pickle",
        "importPath": "joblib",
        "description": "joblib",
        "isExtraImport": true,
        "detail": "joblib",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    return render_template('ontheside.html')\n@app.route('/predict', methods=['GET', 'POST'])\ndef serve_predictions():\n    carat_size = request.form['carat']\n    length = request.form['length']\n    diamond_clarity = request.form['clarity']\n    diamond_color = request.form['color']\n    array = np.array([carat_size, length, diamond_clarity, diamond_color])\n    array = array.astype('float')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "serve_predictions",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def serve_predictions():\n    carat_size = request.form['carat']\n    length = request.form['length']\n    diamond_clarity = request.form['clarity']\n    diamond_color = request.form['color']\n    array = np.array([carat_size, length, diamond_clarity, diamond_color])\n    array = array.astype('float')\n    array = array.reshape(1, -1)\n    prediction = model.predict(array)\n    return render_template('ontheside.html', data=int(prediction))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\nmodel = pickle.load(open('model.pkl', 'rb'))\n@app.route('/')\ndef index():\n    return render_template('ontheside.html')\n@app.route('/predict', methods=['GET', 'POST'])\ndef serve_predictions():\n    carat_size = request.form['carat']\n    length = request.form['length']\n    diamond_clarity = request.form['clarity']",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "model = pickle.load(open('model.pkl', 'rb'))\n@app.route('/')\ndef index():\n    return render_template('ontheside.html')\n@app.route('/predict', methods=['GET', 'POST'])\ndef serve_predictions():\n    carat_size = request.form['carat']\n    length = request.form['length']\n    diamond_clarity = request.form['clarity']\n    diamond_color = request.form['color']",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "build_model",
        "kind": 2,
        "importPath": "diamonds",
        "description": "diamonds",
        "peekOfCode": "def build_model():\n    ## read the dataset\n    def read_df(file_dir, file_name):\n        path = os.path.join(file_dir, file_name)\n        df = pd.read_csv(path)\n        return df\n    file_dir = 'C:\\\\Users\\\\User\\\\Desktop\\\\Data Projects\\\\Diamonds'\n    file_loc = 'diamonds.csv'\n    df = read_df(file_dir=file_dir, file_name=file_loc)\n    ## drop unwanted column",
        "detail": "diamonds",
        "documentation": {}
    }
]